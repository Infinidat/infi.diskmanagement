[buildout]
include-site-packages = false
relative-paths = true
unzip = true
newest = false
download-cache = .cache
develop = .
parts = python-distribution setup.py __init__.py scripts
python = python-distribution

[project]
name = infi.diskmanagement
namespace_packages = ['infi']
install_requires = ['distribute', 'infi.instruct', 'infi.crap', 'infi.wioctl', 'infi.pyutils', 'infi.devicemanager', 'capacity', 'infi.wmi']
install_requires_windows = []
install_requires_linux = []
install_requires_macosx = []
version_file = src/infi/diskmanagement/__version__.py
description = Windows Disk Management wrapping in Python
long_description = This module gives the same functionality as diskpart. But unlike diskpart, it does not use VDS, it uses SetupAPI and direct IOCTLs to the disks, volumes, and the mount and partitions managers
console_scripts = []

[python-distribution]
recipe = infi.recipe.python:download
executable = parts/python/bin/python
download-base = ftp://ci.infinidat.com/workspace/python
version = v2.7.2.1

[setup.py]
recipe = infi.recipe.template.version
input = setup.in
output = setup.py

[__init__.py]
recipe = infi.recipe.template.version
output = ${project:version_file}
input = inline:
	__version__ = "${infi.recipe.template.version:version}"

[scripts]
recipe = zc.recipe.egg
relative-paths = true
unzip = true
dependent-scripts = true
eggs = ${project:name}
	ipython
	nose
	mock
	redgreen
	coverage
	nose-achievements
	infi.unittest
interpreter = python

[eclipse]
recipe = rbco.recipe.pyeclipse
project-name = ${project:name}
python-version = 2.7
project-directory = ${buildout:directory}

[pydev]
recipe = pb.recipes.pydev
eggs = ${scripts:eggs}

